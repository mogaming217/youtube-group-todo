rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userID) {
      return isAnyAuthenticated() && userID == request.auth.uid;
    }

    function documentPath(paths) { // paths must be array of string
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function isFieldIncremented(fieldName, value) {
      return fieldName in request.resource.data && (
        (resource == null || !(fieldName in resource.data)) && request.resource.data[fieldName] == value
        || request.resource.data[fieldName] == resource.data[fieldName] + value
      );
    }

    function isNotUpdating(fieldName) {
      return !(fieldName in request.resource.data) || request.resource.data[fieldName] == resource.data[fieldName]
    }

    function isUserBelongingToGroup(groupID) {
      return exists(documentPath(['groups', groupID, 'groupUsers', request.auth.uid]));
    }

    function isValidInvitationCode(groupID, code) {
      return get(documentPath(['groups', groupID, 'invitationCodes', code])).data.expireAt > request.time;
    }

    match /users/{userID} {
      allow create: if isUserAuthenticated(userID)
        && (!('name' in request.resource.data) || (request.resource.data.name is string && request.resource.data.name.size() <= 20))
        && (!('iconURL' in request.resource.data) || (request.resource.data.iconURL is string && request.resource.data.iconURL.size() <= 1000))
        && request.resource.data.createdAt == request.time // serverTimestamp()
        && request.resource.data.updatedAt == request.time // serverTimestamp()
      ;
      allow update: if isUserAuthenticated(userID)
        && isNotUpdating('groupCount')
        && request.resource.data.updatedAt == request.time;
      allow get: if isUserAuthenticated(userID);

      // match /belongingGroups/{groupID} {
      //   allow create: if isUserAuthenticated(userID)
      //     && existsAfter(documentPath(['groups', groupID, 'groupUsers', userID]));
      // }
    }

    match /groups/{groupID} {
      allow get: if isUserBelongingToGroup(groupID);
      allow update: if isUserBelongingToGroup(groupID);

      match /groupUsers/{userID} {
        allow read: if isUserBelongingToGroup(groupID);
        allow create: if isUserAuthenticated(userID)
          && get(documentPath('invitationCodes', request.resource.data.invitationCode)).data.groupID == groupID
          && get(documentPath('invitationCodes', request.resource.data.invitationCode)).data.expireAt > request.time;
      }
    }

    match /invitationCodes/{code} {
      allow create: if isAnyAuthenticated()
        && request.resource.data.groupID is string
        && isUserBelongingToGroup(request.resource.data.groupID)
        && request.resource.data.expireAt is timestamp
        && request.resource.data.createdAt > request.time;

      allow read: if isAnyAuthenticated()
        && timestamp.value(resource.data.createdAt.toMills() + 30 * 60 * 1000) > request.time;
    }
  }
}
